// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MIMIKEdgeClientUser
import Alamofire
import CoreLocation
import Foundation
import MIMIKEdgeClientCore
import Swift
import SwiftyJSON
import UIKit
import _Concurrency
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct Place : Swift.Codable {
    public var formatted: Swift.String?
    public var streetAddress: Swift.String?
    public var locality: Swift.String?
    public var region: Swift.String?
    public var postalCode: Swift.String?
    public var country: Swift.String?
    public var addressNumber: Swift.String?
    public var street: Swift.String?
    public var geoLocation: [Swift.Double]?
    public init(formatted: Swift.String?, streetAddress: Swift.String?, locality: Swift.String?, region: Swift.String?, postalCode: Swift.String?, country: Swift.String?, addressNumber: Swift.String?, street: Swift.String?, geoLocation: [Swift.Double]?)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
@objc @_inheritsConvenienceInitializers final public class MIMIKEdgeClientPeer : ObjectiveC.NSObject {
  public static let kSwaggerFileVersion: Swift.String
  public static let kServiceType: MIMIKEdgeClientCore.MIMIKService.ServiceType
  public static let kHealthCheckPath: Swift.String
  final public class func swaggerFileVersion() -> Swift.String
  final public class func serviceType() -> MIMIKEdgeClientCore.MIMIKService.ServiceType
  final public class func serviceConfiguration(rootUrl: Foundation.URL, clientId: Swift.String) -> MIMIKEdgeClientCore.MIMIKService
  final public class func healthCheckPath() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  
  #if compiler(>=5.3) && $AsyncAwait
  final public func friends(service: MIMIKEdgeClientCore.MIMIKService) async -> Swift.Result<[MIMIKEdgeClientCore.MIMIKEdgeClient.MIMIKFriend], Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func friendList(service: MIMIKEdgeClientCore.MIMIKService) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.FriendList, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func receivedFriendRequests(service: MIMIKEdgeClientCore.MIMIKService) async -> Swift.Result<[MIMIKEdgeClientCore.MIMIKEdgeClient.MIMIKFriend], Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func receivedFriendRequestList(service: MIMIKEdgeClientCore.MIMIKService) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.FriendRequestList, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func sentFriendRequests(service: MIMIKEdgeClientCore.MIMIKService) async -> Swift.Result<[MIMIKEdgeClientCore.MIMIKEdgeClient.MIMIKFriend], Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func sentFriendRequestList(service: MIMIKEdgeClientCore.MIMIKService) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.RequestFriendList, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func requestFriendship(service: MIMIKEdgeClientCore.MIMIKService, friendId: Swift.String) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.NewUser, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func acceptFriendship(service: MIMIKEdgeClientCore.MIMIKService, friendId: Swift.String) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.FriendRequestUpdateState, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func cancelFriendship(service: MIMIKEdgeClientCore.MIMIKService, friendId: Swift.String) async -> Swift.Result<Swift.Bool, Foundation.NSError>
  #endif

}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct UserLocation : Swift.Codable {
    public enum ModelType : Swift.String, Swift.Codable {
      case point
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var origin: Swift.String?
    public var type: MIMIKEdgeClientCore.MIMIKEdgeClient.UserLocation.ModelType
    public var coordinates: [Swift.Double]
    public var elevation: Swift.Double?
    public var speed: Swift.Double?
    public var bearing: Swift.Double?
    public var country: Swift.String?
    public var region: Swift.String?
    public var city: Swift.String?
    public var zip: Swift.String?
    public var isp: Swift.String?
    public init(origin: Swift.String?, type: MIMIKEdgeClientCore.MIMIKEdgeClient.UserLocation.ModelType, coordinates: [Swift.Double], elevation: Swift.Double?, speed: Swift.Double?, bearing: Swift.Double?, country: Swift.String?, region: Swift.String?, city: Swift.String?, zip: Swift.String?, isp: Swift.String?)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct FriendRequestList : Swift.Codable {
    public var owner: MIMIKEdgeClientCore.MIMIKEdgeClient.NewUser?
    public var _id: Swift.String?
    public var _self: Swift.String?
    public var requests: [MIMIKEdgeClientCore.MIMIKEdgeClient.FriendRequests]?
    public var createdAt: Foundation.Date?
    public var updatedAt: Foundation.Date?
    public init(owner: MIMIKEdgeClientCore.MIMIKEdgeClient.NewUser?, _id: Swift.String?, _self: Swift.String?, requests: [MIMIKEdgeClientCore.MIMIKEdgeClient.FriendRequests]?, createdAt: Foundation.Date?, updatedAt: Foundation.Date?)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case owner
      case _id
      case _self
      case requests
      case createdAt
      case updatedAt
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct ProfileUser : Swift.Codable {
    public var _id: Swift.String?
    public var externalIds: [MIMIKEdgeClientCore.JSONValue]?
    public var email: Swift.String?
    public var consents: [MIMIKEdgeClientCore.MIMIKEdgeClient.Consent]?
    public var ssn: Swift.String?
    public var name: MIMIKEdgeClientCore.MIMIKEdgeClient.Name?
    public var displayName: Swift.String?
    public var nickName: Swift.String?
    public var preferredLanguage: Swift.String?
    public var locale: Swift.String?
    public var timeZone: Swift.String?
    public var address: MIMIKEdgeClientCore.MIMIKEdgeClient.Address?
    public var phoneNumber: Swift.String?
    public var gender: Swift.String?
    public var dateOfBirth: Foundation.Date?
    public var location: MIMIKEdgeClientCore.MIMIKEdgeClient.UserLocation?
    public var attributes: [MIMIKEdgeClientCore.MIMIKEdgeClient.UserItem]?
    public var references: [MIMIKEdgeClientCore.MIMIKEdgeClient.Reference]?
    public var friendListId: Swift.String?
    public var avatar: Swift.String?
    public var createdAt: Foundation.Date?
    public var updatedAt: Foundation.Date?
    public var appIds: [Swift.String]?
    public init(_id: Swift.String?, externalIds: [MIMIKEdgeClientCore.JSONValue]?, email: Swift.String?, consents: [MIMIKEdgeClientCore.MIMIKEdgeClient.Consent]?, ssn: Swift.String?, name: MIMIKEdgeClientCore.MIMIKEdgeClient.Name?, displayName: Swift.String?, nickName: Swift.String?, preferredLanguage: Swift.String?, locale: Swift.String?, timeZone: Swift.String?, address: MIMIKEdgeClientCore.MIMIKEdgeClient.Address?, phoneNumber: Swift.String?, gender: Swift.String?, dateOfBirth: Foundation.Date?, location: MIMIKEdgeClientCore.MIMIKEdgeClient.UserLocation?, attributes: [MIMIKEdgeClientCore.MIMIKEdgeClient.UserItem]?, references: [MIMIKEdgeClientCore.MIMIKEdgeClient.Reference]?, friendListId: Swift.String?, avatar: Swift.String?, createdAt: Foundation.Date?, updatedAt: Foundation.Date?, appIds: [Swift.String]?)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case _id
      case externalIds
      case email
      case consents
      case ssn
      case name
      case displayName
      case nickName
      case preferredLanguage
      case locale
      case timeZone
      case address
      case phoneNumber
      case gender
      case dateOfBirth
      case location
      case attributes
      case references
      case friendListId
      case avatar
      case createdAt
      case updatedAt
      case appIds
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct FriendRequestState : Swift.Codable {
    public enum State : Swift.String, Swift.Codable {
      case new
      case accepted
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var state: MIMIKEdgeClientCore.MIMIKEdgeClient.FriendRequestState.State?
    public init(state: MIMIKEdgeClientCore.MIMIKEdgeClient.FriendRequestState.State?)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Address {
  public func dictionary() -> [Swift.String : Any]?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Name {
  public func dictionary() -> [Swift.String : Any]?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser {
  public func dictionary() -> [Swift.String : Any]?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Reference {
  public func dictionary() -> [Swift.String : Any]?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.UserItem {
  public func dictionary() -> [Swift.String : Any]?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.UserLocation {
  public func dictionary() -> [Swift.String : Any]?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.UserUpdate {
  public func dictionary() -> [Swift.String : Any]?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Ssn {
  public func dictionary() -> [Swift.String : Any]?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.UpdateSsn {
  public func dictionary() -> [Swift.String : Any]?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Consent {
  public func dictionary() -> [Swift.String : Any]?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.NewConsent {
  public func dictionary() -> [Swift.String : Any]?
}
extension Foundation.Formatter {
  public static let iso8601DateOnly: Foundation.DateFormatter
}
extension Foundation.Date {
  public var iso8601DateOnly: Swift.String {
    get
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct Consent : Swift.Codable {
    public enum Source : Swift.String, Swift.Codable {
      case email
      case phone
      case web
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var contactMethod: Swift.String
    public var contactPoint: Swift.String
    public var source: MIMIKEdgeClientCore.MIMIKEdgeClient.Consent.Source
    public var createdAt: Foundation.Date
    public var _id: Foundation.UUID?
    public init(contactMethod: Swift.String, contactPoint: Swift.String, source: MIMIKEdgeClientCore.MIMIKEdgeClient.Consent.Source, createdAt: Foundation.Date, _id: Foundation.UUID?)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case contactMethod
      case contactPoint
      case source
      case createdAt
      case _id
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct RequestFriends : Swift.Codable {
    public var addedAt: Foundation.Date?
    public var _id: Swift.String?
    public var state: Swift.String?
    public init(addedAt: Foundation.Date?, _id: Swift.String?, state: Swift.String?)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case addedAt
      case _id
      case state
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct FriendRequestUpdateState : Swift.Codable {
    public enum State : Swift.String, Swift.Codable {
      case accepted
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var state: MIMIKEdgeClientCore.MIMIKEdgeClient.FriendRequestUpdateState.State?
    public init(state: MIMIKEdgeClientCore.MIMIKEdgeClient.FriendRequestUpdateState.State?)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct FriendList : Swift.Codable {
    public var createdAt: Foundation.Date?
    public var updatedAt: Foundation.Date?
    public var _self: Swift.String?
    public var friends: [MIMIKEdgeClientCore.MIMIKEdgeClient.Friends]?
    public var owner: MIMIKEdgeClientCore.MIMIKEdgeClient.NewUser?
    public var _id: Swift.String?
    public init(createdAt: Foundation.Date?, updatedAt: Foundation.Date?, _self: Swift.String?, friends: [MIMIKEdgeClientCore.MIMIKEdgeClient.Friends]?, owner: MIMIKEdgeClientCore.MIMIKEdgeClient.NewUser?, _id: Swift.String?)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case createdAt
      case updatedAt
      case _self
      case friends
      case owner
      case _id
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.FriendList {
  public func dictionary() -> [Swift.String : Any]?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Friends {
  public func dictionary() -> [Swift.String : Any]?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.FriendRequestList {
  public func dictionary() -> [Swift.String : Any]?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.FriendRequestState {
  public func dictionary() -> [Swift.String : Any]?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.FriendRequestUpdateState {
  public func dictionary() -> [Swift.String : Any]?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.NewUser {
  public func dictionary() -> [Swift.String : Any]?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.RequestFriendList {
  public func dictionary() -> [Swift.String : Any]?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  @objc public class MIMIKFriend : ObjectiveC.NSObject {
    @objc public var name: Swift.String?
    @objc public var email: Swift.String?
    @objc public var id: Swift.String?
    @objc public var accountId: Swift.String?
    @objc public var thumbnailURL: Swift.String?
    public init(name: Swift.String?, email: Swift.String?, id: Swift.String?, accountId: Swift.String?, thumbnailURL: Swift.String?)
    public func mimikDescription() -> Swift.String
    @objc deinit
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct UpdateSsn : Swift.Codable {
    public var ssn: Swift.String
    public init(ssn: Swift.String)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct NewConsent : Swift.Codable {
    public enum Source : Swift.String, Swift.Codable {
      case email
      case phone
      case web
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var contactMethod: Swift.String
    public var contactPoint: Swift.String
    public var source: MIMIKEdgeClientCore.MIMIKEdgeClient.NewConsent.Source
    public var createdAt: Foundation.Date
    public init(contactMethod: Swift.String, contactPoint: Swift.String, source: MIMIKEdgeClientCore.MIMIKEdgeClient.NewConsent.Source, createdAt: Foundation.Date)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public typealias AddressSuggestion = [SwiftyJSON.JSON]
}
@objc @_inheritsConvenienceInitializers final public class MIMIKEdgeClientThumbnail : ObjectiveC.NSObject {
  public static let kSwaggerFileVersion: Swift.String
  public static let kServiceType: MIMIKEdgeClientCore.MIMIKService.ServiceType
  public static let kHealthCheckPath: Swift.String
  final public class func swaggerFileVersion() -> Swift.String
  final public class func serviceType() -> MIMIKEdgeClientCore.MIMIKService.ServiceType
  final public class func serviceConfiguration(rootUrl: Foundation.URL, clientId: Swift.String) -> MIMIKEdgeClientCore.MIMIKService
  final public class func healthCheckPath() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  
  #if compiler(>=5.3) && $AsyncAwait
  final public func userAvatarLegacy(service: MIMIKEdgeClientCore.MIMIKService, profileUser: MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser) async -> Swift.Result<UIKit.UIImage, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func updateUserAvatarLegacy(service: MIMIKEdgeClientCore.MIMIKService, profileUser: MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser, image: UIKit.UIImage, attributeKey: Swift.String = "image", targetSize: CoreGraphics.CGSize = CGSize(width: 300.0, height: 300.0), compressionQuality: CoreGraphics.CGFloat = 0.5, bytesLimit: Swift.Int = 75_000) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func userAvatarLegacyAttribute(service: MIMIKEdgeClientCore.MIMIKService, profileUser: MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser, attributeKey: Swift.String) async -> Swift.Result<UIKit.UIImage, Foundation.NSError>
  #endif

}
@objc @_inheritsConvenienceInitializers final public class MIMIKEdgeClientUser : ObjectiveC.NSObject {
  public static let kSwaggerFileVersion: Swift.String
  public static let kServiceType: MIMIKEdgeClientCore.MIMIKService.ServiceType
  public static let kHealthCheckPath: Swift.String
  final public class func swaggerFileVersion() -> Swift.String
  final public class func serviceType() -> MIMIKEdgeClientCore.MIMIKService.ServiceType
  final public class func serviceConfiguration(rootUrl: Foundation.URL, clientId: Swift.String) -> MIMIKEdgeClientCore.MIMIKService
  final public class func healthCheckPath() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  
  #if compiler(>=5.3) && $AsyncAwait
  final public func userProfile(service: MIMIKEdgeClientCore.MIMIKService) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func updateUserProfile(service: MIMIKEdgeClientCore.MIMIKService, user: MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser, update: MIMIKEdgeClientCore.MIMIKEdgeClient.UserUpdate) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func addUserProfileNotificationsConsent(service: MIMIKEdgeClientCore.MIMIKService, user: MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser, consent: MIMIKEdgeClientCore.MIMIKEdgeClient.NewConsent) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func deleteUserProfileNotificationsConsent(service: MIMIKEdgeClientCore.MIMIKService, user: MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser, consentId: Swift.String) async -> Swift.Result<Swift.Bool, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func updateUserProfileAttributes(service: MIMIKEdgeClientCore.MIMIKService, profileUser: MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser, attributes: [MIMIKEdgeClientCore.MIMIKEdgeClient.UserItem]) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func updateUserProfileProperties(service: MIMIKEdgeClientCore.MIMIKService, properties: [Swift.String : Any]) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func updateUserSsn(service: MIMIKEdgeClientCore.MIMIKService, user: MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser, update: MIMIKEdgeClientCore.MIMIKEdgeClient.UpdateSsn) async -> Swift.Result<Swift.Bool, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func findUserWith(service: MIMIKEdgeClientCore.MIMIKService, email: Swift.String) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser, Foundation.NSError>
  #endif

}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct Friends : Swift.Codable {
    public var addedAt: Swift.String?
    public var origin: Swift.String?
    public var _self: Swift.String?
    public var _id: Swift.String?
    public init(addedAt: Swift.String?, origin: Swift.String?, _self: Swift.String?, _id: Swift.String?)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case addedAt
      case origin
      case _self
      case _id
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct NewUser : Swift.Codable {
    public var _id: Swift.String
    public var _self: Swift.String?
    public init(_id: Swift.String, _self: Swift.String?)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case _id
      case _self
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct Thumbnail : Swift.Codable {
    public var _id: Swift.String?
    public var _self: Swift.String?
    public var createdAt: Foundation.Date?
    public var updatedAt: Foundation.Date?
    public var owner: MIMIKEdgeClientCore.JSONValue
    public var image: Swift.String
    public init(_id: Swift.String?, _self: Swift.String?, createdAt: Foundation.Date?, updatedAt: Foundation.Date?, owner: MIMIKEdgeClientCore.JSONValue, image: Swift.String)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case _id
      case _self
      case createdAt
      case updatedAt
      case owner
      case image
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct FriendRequests : Swift.Codable {
    public var addedAt: Foundation.Date?
    public var _id: Swift.String?
    public var state: Swift.String?
    public init(addedAt: Foundation.Date?, _id: Swift.String?, state: Swift.String?)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case addedAt
      case _id
      case state
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public enum MIMIKFriendState {
    case unknown
    case currentList
    case incomingList
    case outgoingList
    case yourAccount
    case notListed
    public static func == (a: MIMIKEdgeClientCore.MIMIKEdgeClient.MIMIKFriendState, b: MIMIKEdgeClientCore.MIMIKEdgeClient.MIMIKFriendState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct Name : Swift.Codable {
    public var formatted: Swift.String?
    public var familyName: Swift.String?
    public var givenName: Swift.String?
    public var middleName: Swift.String?
    public var honorificPrefix: Swift.String?
    public var honorificSuffix: Swift.String?
    public init(formatted: Swift.String?, familyName: Swift.String?, givenName: Swift.String?, middleName: Swift.String?, honorificPrefix: Swift.String?, honorificSuffix: Swift.String?)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  
  #if compiler(>=5.3) && $AsyncAwait
  final public func addressSuggestions(service: MIMIKEdgeClientCore.MIMIKService, address: Swift.String, maxSuggestions: Swift.Int?, language: Swift.String?, countries: [Swift.String]?, geoLocation: CoreLocation.CLLocation? = nil, geoFence: (southWest: CoreLocation.CLLocation, northEast: CoreLocation.CLLocation)? = nil) async -> Swift.Result<SwiftyJSON.JSON, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func places(service: MIMIKEdgeClientCore.MIMIKService, address: Swift.String, maxPlaces: Swift.Int?, language: Swift.String?, countries: [Swift.String]?, geoLocation: CoreLocation.CLLocation? = nil, geoFence: (southWest: CoreLocation.CLLocation, northEast: CoreLocation.CLLocation)? = nil) async -> Swift.Result<[MIMIKEdgeClientCore.MIMIKEdgeClient.Place], Foundation.NSError>
  #endif

}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct RequestFriendList : Swift.Codable {
    public var owner: MIMIKEdgeClientCore.MIMIKEdgeClient.NewUser?
    public var _self: Swift.String?
    public var requests: [MIMIKEdgeClientCore.MIMIKEdgeClient.RequestFriends]?
    public var createdAt: Foundation.Date?
    public var updatedAt: Foundation.Date?
    public var _id: Swift.String?
    public init(owner: MIMIKEdgeClientCore.MIMIKEdgeClient.NewUser?, _self: Swift.String?, requests: [MIMIKEdgeClientCore.MIMIKEdgeClient.RequestFriends]?, createdAt: Foundation.Date?, updatedAt: Foundation.Date?, _id: Swift.String?)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case owner
      case _self
      case requests
      case createdAt
      case updatedAt
      case _id
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct UserUpdate : Swift.Codable {
    public var name: MIMIKEdgeClientCore.MIMIKEdgeClient.Name?
    public var displayName: Swift.String?
    public var nickName: Swift.String?
    public var preferredLanguage: Swift.String?
    public var locale: Swift.String?
    public var timeZone: Swift.String?
    public var address: MIMIKEdgeClientCore.MIMIKEdgeClient.Address?
    public var phoneNumber: Swift.String?
    public var dateOfBirth: Swift.String?
    public var gender: Swift.String?
    public var location: MIMIKEdgeClientCore.MIMIKEdgeClient.UserLocation?
    public var attributes: [MIMIKEdgeClientCore.MIMIKEdgeClient.UserItem]?
    public init(name: MIMIKEdgeClientCore.MIMIKEdgeClient.Name?, displayName: Swift.String?, nickName: Swift.String?, preferredLanguage: Swift.String?, locale: Swift.String?, timeZone: Swift.String?, address: MIMIKEdgeClientCore.MIMIKEdgeClient.Address?, phoneNumber: Swift.String?, gender: Swift.String?, dateOfBirth: Foundation.Date?, location: MIMIKEdgeClientCore.MIMIKEdgeClient.UserLocation?, attributes: [MIMIKEdgeClientCore.MIMIKEdgeClient.UserItem]?)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct UserItem : Swift.Codable {
    public var name: Swift.String
    public var value: Swift.String
    public init(name: Swift.String, value: Swift.String)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct Reference : Swift.Codable {
    public var serverType: Swift.String?
    public var resourceName: Swift.String
    public var include: Swift.String?
    public var _id: Swift.String?
    public var _self: Swift.String
    public init(serverType: Swift.String?, resourceName: Swift.String, include: Swift.String?, _id: Swift.String?, _self: Swift.String)
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case serverType
      case resourceName
      case include
      case _id
      case _self
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct Ssn : Swift.Codable {
    public var ssn: Swift.String?
    public init(ssn: Swift.String?)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct Address : Swift.Codable {
    public var formatted: Swift.String?
    public var streetAddress: Swift.String?
    public var locality: Swift.String?
    public var region: Swift.String?
    public var postalCode: Swift.String?
    public var country: Swift.String?
    public init(formatted: Swift.String?, streetAddress: Swift.String?, locality: Swift.String?, region: Swift.String?, postalCode: Swift.String?, country: Swift.String?)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser {
  public enum Attribute : Swift.String, Swift.CaseIterable {
    case firstName
    case lastName
    case job
    case streetName
    case city
    case state
    case zipCode
    public init?(rawValue: Swift.String)
    public typealias AllCases = [MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser.Attribute]
    public typealias RawValue = Swift.String
    public static var allCases: [MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser.Attribute] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public func attributeForKey(key: Swift.String) -> Swift.String?
  public func hasAllAttributes() -> Swift.Bool
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.UserLocation.ModelType : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.UserLocation.ModelType : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.UserLocation.ModelType : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.FriendRequestList.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.FriendRequestList.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.FriendRequestList.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.FriendRequestState.State : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.FriendRequestState.State : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.FriendRequestState.State : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Consent.Source : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Consent.Source : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Consent.Source : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Consent.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Consent.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Consent.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.RequestFriends.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.RequestFriends.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.RequestFriends.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.FriendRequestUpdateState.State : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.FriendRequestUpdateState.State : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.FriendRequestUpdateState.State : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.FriendList.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.FriendList.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.FriendList.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.NewConsent.Source : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.NewConsent.Source : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.NewConsent.Source : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Friends.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Friends.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Friends.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.NewUser.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.NewUser.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.NewUser.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Thumbnail.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Thumbnail.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Thumbnail.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.FriendRequests.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.FriendRequests.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.FriendRequests.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.MIMIKFriendState : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.MIMIKFriendState : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.RequestFriendList.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.RequestFriendList.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.RequestFriendList.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Reference.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Reference.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Reference.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser.Attribute : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser.Attribute : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.ProfileUser.Attribute : Swift.RawRepresentable {}
